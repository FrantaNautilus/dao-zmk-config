/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Czech Linux keyboard
#include "keys_cs.h"

// Layer numbers
#define USDEF 0
#define USNUM 1
#define USNAV 2
#define USADJ 3
#define CSDEF 4
#define CSDIA 5
#define CSDII 6
#define CSNUM 7
#define CSNAV 8
#define CSADJ 9

// Other number definitions
#define TAPPING_TERM 150
#define SHIFT_TAP_MS 170
#define QUICK_TAP_MS 110
#define PRIOR_IDLE_MS 150
#define COMBO_TIME_MS 25

// Behavior customizations
// settings and homerow mods inspired by https://github.com/urob/zmk-config/

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl {
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <TAPPING_TERM>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
  quick_tap_ms = <QUICK_TAP_MS>;
};

// ZMK feature macros
// https://github.com/filterpaper/zmk-config

//additional  arguments for hold-trigger-key-positions and hold-trigger-on-release
// customizable hold-tap for keypress
#define HTK(name, tap_flavor, tap_term, ...)    \
  name: name##_hold_tap {                       \
    flavor          = #tap_flavor;              \
    compatible      = "zmk,behavior-hold-tap";  \
    tapping-term-ms = <tap_term>;               \
    quick-tap-ms    = <QUICK_TAP_MS>;           \
    require-prior-idle-ms = <PRIOR_IDLE_MS>;    \
    #binding-cells  = <2>;                      \
    bindings        = <&kp>, <&kp>;             \
    __VA_ARGS__                                 \
      };

// customizeble hold-tap for any behavior
#define HTMOSL(name, tap_flavor, tap_term, ...) \
  name: name##_hold_tap {                       \
    flavor          = #tap_flavor;              \
    compatible      = "zmk,behavior-hold-tap";  \
    tapping-term-ms = <tap_term>;               \
    quick-tap-ms    = <QUICK_TAP_MS>;           \
    require-prior-idle-ms = <PRIOR_IDLE_MS>;    \
    #binding-cells = <2>;                       \
    bindings        = <&mo>, <&sl>;             \
    __VA_ARGS__                                 \
      };

// one-line combos
#define COMBO(name, pos, lrs, kp)               \
  combo_##name {                                \
    timeout-ms    = <25>;                       \
    bindings      = <kp>;                       \
    key-positions = <pos>;                      \
    layers        = <lrs>;                      \
  };

// one-line macros
#define MACRO(name, ...)                        \
  name: name##_macro {                          \
    compatible     = "zmk,behavior-macro";      \
    tap-ms         = <1>;                       \
    wait-ms        = <1>;                       \
    #binding-cells = <0>;                       \
    bindings       = __VA_ARGS__                \
      };

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    // zmk,matrix_transform = &extra_keys_transform;
  };
};

/ {
  macros {
    // Czech symbols
    MACRO(cs_t_caron, <&macro_tap &kp CS_CARON &kp CS_T>;)
      MACRO(cs_n_caron, <&macro_tap &kp CS_CARON &kp CS_N>;)
      MACRO(cs_d_caron, <&macro_tap &kp CS_CARON &kp CS_D>;)
      MACRO(cs_o_acute, <&macro_tap &kp CS_ACUTE &kp CS_O>;)
      };

  behaviors {
    HTK(lhrm, balanced, TAPPING_TERM)
      HTK(rhrm, balanced, TAPPING_TERM)
      HTMOSL(ldia_mosl, hold-preferred, TAPPING_TERM)
      HTMOSL(rdia_mosl, hold-preferred, TAPPING_TERM)
  csquote: csquote {
      //label          = "csquote";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_SQT>, <&kp CS_DQT>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  csbslh: csbslh {
      //label          = "csbslh";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_BSLH>, <&kp CS_PIPE>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  csdot: csdot {
      //label          = "csdot";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_DOT>, <&kp CS_LT>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  cscomma: cscomma {
      //label          = "cscomma";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_COMMA>, <&kp CS_GT>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  csfslh: csfslh {
      //label          = "csfslh";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_FSLH>, <&kp CS_QMARK>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  cssemi: cssemi {
      //label          = "cssemi";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_SEMI>, <&kp CS_COLON>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  csgrave: csgrave {
      //label          = "cssemi";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_GRAVE>, <&kp CS_TILDE>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  csequal: csequal {
      //label          = "cssemi";
      compatible     = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings       = <&kp CS_EQUAL>, <&kp CS_PLUS>;
      mods           = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  combos {
    compatible = "zmk,combos";
    COMBO(lag, 28 29, USDEF USNUM CSDEF CSNUM, &kp RALT)
      COMBO(rag, 33 34, USDEF USNUM CSDEF CSNUM, &kp RALT)
      COMBO(csdeflayer, 12 13, USDEF, &to CSDEF)
      COMBO(usdeflayer, 12 13, CSDEF, &to USDEF)
      //COMBO(csdiilayer, 24 25, CSDEF, &tog CSDII)
      COMBO(usnavlayer, 22 23, USDEF, &tog USNAV)
      COMBO(usnumlayer, 10 11, USDEF, &tog USNUM)
      COMBO(csnavlayer, 22 23, CSDEF, &tog CSNAV)
      COMBO(csnumlayer, 10 11, CSDEF, &tog CSNUM)
      //COMBO(copy, 15 16, USDEF CSDEF, &kp K_COPY)
      //COMBO(paste, 13 14, USDEF CSDEF, &kp K_PASTE)
      //COMBO(repeat, 14 15, USDEF CSDEF, &key_repeat)

      // Shift
      COMBO(crshft, 7 19, USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp RSHFT)
      COMBO(clshft, 4 16, USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp LSHFT)
      // Control
      COMBO(crctrl, 8 20, USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp RCTRL)
      COMBO(clctrl, 3 15, USDEF  USNUM USNAV CSDEF CSNUM CSNAV, &kp LCTRL)
      // Alt
      COMBO(cllalt, 9 21, USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp LALT)
      COMBO(crlalt, 2 14, USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp LALT)
      // Gui
      COMBO(clgui, 10 22, USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp LGUI)
      COMBO(crgui, 1 13,  USDEF USNUM USNAV CSDEF CSNUM CSNAV, &kp RGUI)
      //Symbols US
      COMBO(usstar,  19 31, USDEF, &kp STAR)
      COMBO(usfslh,  16 28, USDEF, &kp FSLH)
      COMBO(usplus,  20 32, USDEF, &kp PLUS)
      COMBO(usminus, 15 27, USDEF, &kp MINUS)
      COMBO(uscaret, 21 33, USDEF, &kp CARET)
      COMBO(usunder, 14 26, USDEF, &kp UNDER)
      COMBO(usdollr, 22 34, USDEF, &kp DOLLAR)
      COMBO(usamps,  13 25, USDEF, &kp AMPS)
      COMBO(usat,    23 35, USDEF, &kp AT)
      COMBO(usprcnt, 12 24, USDEF, &kp PERCENT)
      COMBO(ushash,  23 35, USDEF, &kp HASH)
      COMBO(uslpar,  5 17 , USDEF, &kp LPAR)
      COMBO(usrpar,  6 18 , USDEF, &kp RPAR)
      COMBO(uslbkt,  17 29, USDEF, &kp LBKT)
      COMBO(usrbkt,  18 30, USDEF, &kp RBKT)
      COMBO(uslbrc,  0 12 , USDEF, &kp LBRC)
      COMBO(usrbrc,  11 23, USDEF, &kp RBRC)
      COMBO(usexcl,  7 8,   USDEF, &kp EXCL)
      COMBO(usqmark, 3 4,   USDEF, &kp QMARK)
      // Symbols CS
      COMBO(csstar,  19 31, CSDEF, &kp CS_STAR)
      COMBO(csfslh,  16 28, CSDEF, &kp CS_FSLH)
      COMBO(csplus,  20 32, CSDEF, &kp CS_PLUS)
      COMBO(csminus, 15 27, CSDEF, &kp CS_MINUS)
      COMBO(cscaret, 21 33, CSDEF, &kp CS_CARET)
      COMBO(csunder, 14 26, CSDEF, &kp CS_UNDER)
      COMBO(csdollr, 22 34, CSDEF, &kp CS_DOLLAR)
      COMBO(csamps,  13 25, CSDEF, &kp CS_AMPS)
      COMBO(csat,    23 35, CSDEF, &kp CS_AT)
      COMBO(csprcnt, 12 24, CSDEF, &kp CS_PERCENT)
      COMBO(cshash,  23 35, CSDEF, &kp CS_HASH)
      COMBO(cslpar,  5 17 , CSDEF, &kp CS_LPAR)
      COMBO(csrpar,  6 18 , CSDEF, &kp CS_RPAR)
      COMBO(cslbkt,  17 29, CSDEF, &kp CS_LBKT)
      COMBO(csrbkt,  18 30, CSDEF, &kp CS_RBKT)
      COMBO(cslbrc,  0 12 , CSDEF, &kp CS_LBRC)
      COMBO(csrbrc,  11 23, CSDEF, &kp CS_RBRC)
      COMBO(csexcl,  7 8, CSDEF, &kp EXCL)
      COMBO(csqmark, 3 4, CSDEF, &kp QMARK)
      };

  // ------------------------------------------------------------------------------------------------------------
  // |  0    |  1  |  2  |  3   |  4   |  5   |          x         |  6   |  7    |  8    |  9   |  10   |  11   |
  // |  12   |  13 |  14 |  15  |  16  |  17  |          x         |  18  |  19   |  20   |  21  |  22   |  23   |
  // |  24   |  25 |  26 |  27  |  28  |  29  |          x         |  30  |  31   |  32   |  33  |  34   |  35   |
  //                            |  36  |  37  |  38    | x |  39   |  40  |  41   |
  //
  keymap {
    compatible = "zmk,keymap";
    // Layer list
    // 0. default_layer
    // 1. us_num_layer
    // 2. us_nav_layer
    // 3. us_adjust_layer
    // 4. cs_base_layer
    // 5. cs_dia_layer
    // 6. cs_dii_layer
    // 7. cs_num_layer
    // 8. cs_nav_layer
    // 9. cs_adjust_layer

    default_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |  DEL  |  Q  |  L  | ESC  |  P   | ,↑<  |                   | .↑>  |  F   |  U    |  D   |   K   | BKSPC |
      // |  '↑"  |  A  |  R  |  E   |  N   |  B   |                   |  G   |  S   |  I    |  T   |   O   |  ;↑:  |
      // |  \↑|  |  Z  |  W  | TAB  |  H   |  J   |                   |  V   |  C   |  Y    |  M   |   X   |  /↑?  |
      //                            |NUMTOG| SHFT |  SPACE |  | ENTER | SHFT | FUN  |
      bindings = <
        &kp DEL  &kp K   &kp D &kp U   &kp F &kp GRAVE                                   &kp EQUAL &kp P &kp DOT   &kp L &kp Q &kp BSPC
        &kp SQT  &kp O   &kp T &kp I   &kp S &kp G                                       &kp B     &kp N &kp E     &kp R &kp A &kp SEMI
        &kp BSLH &kp X   &kp M &kp Y   &kp C &kp V                                       &kp J     &kp H &kp COMMA &kp W &kp Z &kp FSLH
        &lt USNUM STAR &lt USNUM TAB &lt USNAV ENTER  &lt USNUM SPACE  &lt USNAV ESC &lt USNAV PLUS
        >;
    };
    us_num_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |   $   |  7  |  6  |  5   |  4   |  8   |                   |  ~   |  ^    |  _    |  #   |   |   |  `    |
      // |   .   |  3  |  2  |  1   |  0   |  9   |                   |  %   |  (    |  [    |  {   |   \   |  $    |
      // |   ,   |  -  |  /  |  +   |  *   |  =   |                   |  @   |  )    |  ]    |  }   |   !   |  &    |
      //                            |      |      |        |  |       |      |       |
      bindings = <
        &kp DOLLAR &kp N7    &kp N6   &kp N5   &kp N4   &kp N8                  &kp TILDE   &kp CARET &kp UNDER &kp HASH &kp PIPE &kp GRAVE
        &kp DOT    &kp N3    &kp N2   &kp N1   &kp N0   &kp N9                  &kp AT      &kp LPAR  &kp LBKT  &kp LBRC &kp BSLH &kp DOLLAR
        &kp COMMA  &kp MINUS &kp FSLH &kp PLUS &kp STAR &kp EQUAL               &kp PERCENT &kp RPAR  &kp RBKT  &kp RBRC &kp EXCL &kp AMPS
        &to USDEF   &kp TAB &kp ENTER  &kp SPACE &kp ESC   &to USDEF
        >;
    };

    us_nav_layer {
      bindings = <
        &bt BT_SEL 0 &kp F9 &kp F10 &kp F11 &kp F12   &tog USADJ                  &kp INS   &kp HOME  &kp UP   &kp END   &kp PG_UP &kp C_VOL_UP
        &bt BT_SEL 1 &kp F5 &kp F6  &kp F7  &kp F8    &kp K_PLAY_PAUSE            &kp CAPS  &kp LEFT  &kp DOWN &kp RIGHT &kp PG_DN &kp C_MUTE
        &bt BT_SEL 2 &kp F1 &kp F2  &kp F3  &kp F4    &kp K_MENU                  &kp PSCRN &kp H     &kp J    &kp K     &kp L     &kp C_VOL_DN
        &to USDEF  &kp TAB   &kp ENTER  &kp SPACE &kp ESC   &to USDEF
        >;
    };

    us_adjust_layer {
      bindings = <
        &bootloader &none        &none        &none        &none        &tog USADJ                  &kp PAUSE_BREAK &kp C_BRI_UP &none       &none       &none  &none
        &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                &kp SYSREQ      &kp K_POWER  &kp K_SLEEP &kp K_LOCK  &none  &none
        &sys_reset  &none        &none        &none        &none        &none                       &kp K_CANCEL    &kp C_BRI_DN &none       &none       &none  &none
        &to USDEF    &to USDEF &to USDEF &to USDEF &to USDEF &to USDEF
        >;
    };

    cs_def_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |  DEL  |  Q  |  L  | ESC  |  P   | ,↑<  |                   | .↑>  |  F   |  U    |  D   |   K   | BKSPC |
      // |  '↑"  |  A  |  R  |  E   |  N   |  B   |                   |  G   |  S   |  I    |  T   |   O   |  ;↑:  |
      // |  \↑|  |  Z  |  W  | TAB  |  H   |  J   |                   |  V   |  C   |  Y    |  M   |   X   |  /↑?  |
      //                            | NAV  |      |  SPACE |  | ENTER |      | FUN  |
      bindings = <
        &kp DEL   &kp CS_K &kp CS_D &kp CS_U &kp CS_F &csgrave                &csequal     &kp CS_P &csdot   &kp CS_L &kp CS_Q &kp BSPC
        &csquote  &kp CS_O &kp CS_T &kp CS_I &kp CS_S &kp CS_G                &kp CS_B     &kp CS_N &kp CS_E &kp CS_R &kp CS_A &cssemi
        &csbslh   &kp CS_X &kp CS_M &kp CS_Y &kp CS_C &kp CS_V                &kp CS_J     &kp CS_H &cscomma &kp CS_W &kp CS_Z &csfslh
        &ldia_mosl CSNUM CSDIA &lt CSNUM TAB  &lt CSNAV ENTER  &lt CSNUM SPACE    &lt CSNAV ESC &rdia_mosl CSNAV CSDIA
        >;
    };

    cs_dia_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |  DEL  |  ←  |  ↑  |  ↓   |  →   |  ?   |                   |  ÷   |  ú   |  ů    |  ď   |   ß   | BKSPC |
      // |   º   |  á  |  ř  |  ě   |  ň   |  ´   |                   |  ˇ   |  š   |  í    |  ť   |   ó   |   §   |
      // |   ¦   |  ž  |  !  |  é   |  °   |  ı   |                   |  ×   |  č   |  ý    |  ¨   |   ẞ   |       |
      //                            |      |      |  SPACE |  | ENTER |      |      |
      bindings = <
        &kp DEL      &kp CS_SZ       &cs_d_caron   &kp CS_U_RING  &kp CS_U_ACUTE &kp CS_DIV               &kp CS_QMARK    &kp CS_LARROW    &kp CS_DARROW  &kp CS_UARROW   &kp CS_RARROW  &kp BSPC
        &kp CS_SECT  &cs_o_acute     &cs_t_caron   &kp CS_I_ACUTE &kp CS_S_CARON &kp CS_CARON             &kp CS_ACUTE    &cs_n_caron      &kp CS_E_CARON &kp CS_R_CARON  &kp CS_A_ACUTE &kp CS_DEG
        &kp CS_OMEGA &kp CS_SZ_SMALL &kp CS_UMLAUT &kp CS_Y_ACUTE &kp CS_C_CARON &kp CS_MULT              &kp CS_NEGATE   &kp CS_DEAD_RING &kp CS_E_ACUTE &kp CS_EXCL     &kp CS_Z_CARON &kp CS_PSEUDOPIPE
        &sl CSDII        &to CSDEF      &to CSDEF  &to CSDEF &to CSDEF       &sl CSDII
        >;
    };

    cs_dii_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |  DEL  |  °  |  ¥  |  ø   |  Ø   |      |                   |  đ   |  Ð   |  ¯    |  ł   |   Ł   | BKSPC |
      // |   ˝   |  Ħ  |  ˛  |  €   |  Æ   |  ¶   |                   |  ®   |  ‚   |  ‘    |  ’   |   þ   |   Þ   |
      // |   `   |  ^  |  ˘  |  ¸   |  ©   |  ˙   |                   |  ŧ   |  Ŧ   |  Ŋ    |  Ω   |   ª   |   ´   |
      //                            |      |      |  SPACE |  | ENTER |      |      |
      bindings = <
        &kp DEL             &kp CS_RING     &kp CS_YEN    &kp CS_OCROSS  &kp CS_OCROSS_CAP &none                           &kp CS_D_STROKE  &kp CS_D_STROKE_CAP  &kp CS_BAR_ABOVE   &kp CS_L_STROKE    &kp CS_L_STROKE_CAP &kp BSPC
        &kp CS_DOUBLE_ACUTE &kp CS_H_STROKE &kp CS_OGONEK &kp CS_EURO    &kp CS_AE         &kp CS_PARAG                    &kp CS_RMARK     &kp CS_BOTTOM_SQT    &kp CS_UPPER_SQT_L &kp CS_UPPER_SQT_R &kp CS_PLINE        &kp CS_PLINE_CAP
        &kp CS_DEAD_GRAVE_L &kp CS_HAT      &kp CS_BREVE  &kp CS_CEDILLA &kp CS_CMARK      &kp CS_DOT_ABOVE                &kp CS_T_STROKE  &kp CS_T_STROKE_CAP  &kp CS_ETA         &kp CS_OMEGA       &kp CS_A_INDEX      &kp CS_DEAD_GRAVE_R
        &to CSDEF         &to CSDEF        &to CSDEF  &to CSDEF &to CSDEF &to CSDEF
        >;
    };

    cs_num_layer {
      // ------------------------------------------------------------------------------------------------------------
      // |   $   |  7  |  6  |  5   |  4   |  8   |                   |  ~   |  ^    |  _    |  #   |   |   |  `    |
      // |   .   |  3  |  2  |  1   |  0   |  9   |                   |  %   |  (    |  [    |  {   |   \   |  $    |
      // |   ,   |  -  |  /  |  +   |  *   |  =   |                   |  @   |  )    |  ]    |  }   |   !   |  &    |
      //                            |      |      |        |  |       |      |       |
      bindings = <
        &kp CS_DOLLAR &kp CS_N7        &kp CS_N6   &kp CS_N5   &kp CS_N4   &kp CS_N8                         &kp CS_TILDE   &kp CS_CARET &kp CS_UNDER &kp CS_HASH &kp CS_PIPE &kp CS_GRAVE
        &kp CS_DOT    &kp CS_N3        &kp CS_N2   &kp CS_N1   &kp CS_N0   &kp CS_N9                         &kp CS_AT      &kp CS_LPAR  &kp CS_LBKT  &kp CS_LBRC &kp CS_BSLH &kp CS_DOLLAR
        &kp CS_COMMA  &kp CS_MINUS     &kp CS_FSLH &kp CS_PLUS &kp CS_STAR &kp CS_EQUAL                      &kp CS_PERCENT &kp CS_RPAR  &kp CS_RBKT  &kp CS_RBRC &kp CS_EXCL &kp CS_AMPS
        &to CSDEF   &kp TAB      &kp ENTER  &kp SPACE &kp ESC        &to CSDEF
        >;
    };

    cs_nav_layer {
      bindings = <
        &bt BT_SEL 0 &kp F9 &kp F10 &kp F11 &kp F12   &tog USADJ                  &kp INS   &kp HOME  &kp UP   &kp END   &kp PG_UP &kp C_VOL_UP
        &bt BT_SEL 1 &kp F5 &kp F6  &kp F7  &kp F8    &kp K_PLAY_PAUSE            &kp CAPS  &kp LEFT  &kp DOWN &kp RIGHT &kp PG_DN &kp C_MUTE
        &bt BT_SEL 2 &kp F1 &kp F2  &kp F3  &kp F4    &kp K_MENU                  &kp PSCRN &kp H     &kp J    &kp K     &kp L     &kp C_VOL_DN
        &to CSDEF  &kp TAB   &kp ENTER  &kp SPACE &kp ESC   &to CSDEF
        >;
    };

    cs_adjust_layer {
      bindings = <
        &bootloader &none        &none        &none        &none        &tog USADJ                  &kp PAUSE_BREAK &kp C_BRI_UP &none       &none       &none  &none
        &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                &kp SYSREQ      &kp K_POWER  &kp K_SLEEP &kp K_LOCK  &none  &none
        &sys_reset  &none        &none        &none        &none        &none                       &kp K_CANCEL    &kp C_BRI_DN &none       &none       &none  &none
        &to USDEF    &to USDEF &to USDEF &to USDEF &to USDEF &to USDEF
        >;
    };
  };
  };
