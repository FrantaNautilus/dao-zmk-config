/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "keys_cs.h"
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };
&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
        macros {
             cs_t_caron: cs_t_caron {
                 label = "cs_t_caron";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_tap &kp CS_CARON &kp CS_T>
                     ;
             };
             cs_n_caron: cs_n_caron {
                 label = "cs_n_caron";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_tap &kp CS_CARON &kp CS_N>
                     ;
             };
             cs_d_caron: cs_d_caron {
                 label = "cs_d_caron";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_tap &kp CS_CARON &kp CS_D>
                     ;
             };
             cs_o_acute: cs_o_acute {
                 label = "cs_o_acute";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_tap &kp CS_ACUTE &kp CS_O>
                     ;
             };
             emacs_c_x: emacs_c_x {
                 label = "emacs_c_x";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp X>
                     , <&macro_release &kp LCTRL>
                     ;
             };
             emacs_c_y: emacs_c_y {
                 label = "emacs_c_y";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp Y>
                     , <&macro_release &kp LCTRL>
                     ;
             };
             emacs_c_x_e: emacs_c_x_e {
                 label = "emacs_c_x_e";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp X>
                     , <&macro_release &kp LCTRL>
                     , <&macro_tap &kp E>
                     ;
             };
             emacs_c_w: emacs_c_w {
                 label = "emacs_c_w";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp W>
                     , <&macro_release &kp LCTRL>
                     ;
             };
             emacs_c_x_u: emacs_c_x_u {
                 label = "emacs_c_w";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LCTRL>
                     , <&macro_tap &kp X>
                     , <&macro_release &kp LCTRL>
                     , <&macro_tap &kp U>
                     ;
             };
             emacs_m_x: emacs_m_x {
                 label = "emacs_m_x";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LALT>
                     , <&macro_tap &kp X>
                     , <&macro_release &kp LALT>
                     ;
             };
             emacs_m_w: emacs_m_w {
                 label = "emacs_m_w";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LALT>
                     , <&macro_tap &kp W>
                     , <&macro_release &kp LALT>
                     ;
             };
             emacs_m_y: emacs_m_y {
                 label = "emacs_m_y";
                 compatible = "zmk,behavior-macro";
                 #binding-cells = <0>;
                 bindings
                     = <&macro_press &kp LALT>
                     , <&macro_tap &kp Y>
                     , <&macro_release &kp LALT>
                     ;
             };
        };

        behaviors {
                td_a: tap_dance_a {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_A";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_A>, <&kp CS_A_ACUTE>, <&kp CS_AE>;
                };
                td_b: tap_dance_b {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_B";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_B>, <&kp CS_SZ_SMALL>, <&kp CS_SZ>;
                };
                td_c: tap_dance_c {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_C";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_C>, <&kp CS_C_CARON>, <&kp CS_CMARK>;
                };
                td_d: tap_dance_d {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_D";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_D>, <&cs_d_caron>, <&kp CS_ETA>;
                };
                td_e: tap_dance_e {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_E";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_E>, <&kp CS_E_CARON>, <&kp CS_EURO>;
                };
                td_f: tap_dance_f {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_F";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_F>, <&kp CS_DEAD_RING>, <&kp CS_DEG>;
                };
                td_g: tap_dance_g {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_G";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_G>, <&kp CS_CARON>, <&kp CS_RMARK>;
                };
                td_h: tap_dance_h {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_H>, <&kp CS_E_ACUTE>, <&kp CS_H_STROKE>;
                };
                td_i: tap_dance_i {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_I";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_I>, <&kp CS_I_ACUTE>, <&kp CS_PSEUDOPIPE>;
                };
                td_j: tap_dance_j {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_J";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_J>, <&kp CS_ACUTE>, <&kp CS_BOTTOM_SQT>;
                };
                td_k: tap_dance_k {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_K";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_K>, <&kp CS_DIV>, <&kp CS_HAT>;
                };
                td_l: tap_dance_l {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_L";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_L>, <&kp CS_L_STROKE>, <&kpCS_L_STROKE_CAP>;
                };
                td_m: tap_dance_m {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_M";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_M>, <&kp CS_MULT>, <&kp CS_DOT_ABOVE>;
                };
                td_n: tap_dance_n {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_N";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_N>, <&cs_n_caron>, <&kp CS_UARROW>;
                };
                td_o: tap_dance_o {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_O";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_O>, <&cs_o_acute>, <&kp CS_RING>;
                };
                td_p: tap_dance_p {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_P";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_P>, <&kp CS_UMLAUT>, <&kp CS_PARAG>;
                };
                td_q: tap_dance_q {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_Q";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_Q>, <&kp CS_D_STROKE>, <&kp CS_D_STROKE_CAP>;
                };
                td_r: tap_dance_r {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_R";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_R>, <&kp CS_R_CARON>, <&kp CS_DARROW>;
                };
                td_s: tap_dance_s {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_S";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_S>, <&kp CS_S_CARON>, <&kp CS_RARROW>;
                };
                td_t: tap_dance_t {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_T";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_T>, <&cs_t_caron>, <&kp CS_LARROW>;
                };
                td_u: tap_dance_u {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_U";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_U>, <&kp CS_U_RING>, <&kp CS_UPPER_SQT_L>;
                };
                td_v: tap_dance_v {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_V";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_V>, <&kp CS_OCROSS>, <&kp CS_OCROSS_CAP>;
                };
                td_w: tap_dance_w {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_W";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_W>, <&kp CS_U_ACUTE>, <&kp CS_OMEGA>;
                };
                td_x: tap_dance_x {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_X";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_X>, <&kp CS_SECT>, <&kp CS_NEGATE>;
                };
                td_y: tap_dance_y {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_Y";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_Y>, <&kp CS_Y_ACUTE>, <&kp CS_YEN>;
                };
                td_z: tap_dance_z {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_Z";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp CS_Z>, <&kp CS_Z_CARON>, <&kp CS_UPPER_SQT_R>;
                };
        };

        combos {
            compatible = "zmk,combos";
            // #######    Left hand     #######
            combo_lag {
                timeout-ms = <25>;
                key-positions = <28 29>;
                layers = <0 1 2 3 5 6 8>;
                bindings = <&kp RALT>;
            };

            combo_rag {
                timeout-ms = <25>;
                key-positions = <33 34>;
                layers = <0 1 2 3 5 6 8>;
                bindings = <&kp RALT>;
            };
            // ##### czech layer toggle #####
            combo_cslayer {
                timeout-ms = <25>;
                key-positions = <12 13>;
                layers = <0 3>;
                bindings = <&tog 3>;
            };
            // ##### nav layer toggle #####
            //combo_navlayer {
            //    timeout-ms = <25>;
            //    key-positions = <4 5>;
            //    layers = <0>;
            //    bindings = <&tog 5>;
            //};
        };
// ------------------------------------------------------------------------------------------------------------
// |  0    |  1  |  2  |  3   |  4   |  5   |          x         |  6   |  7    |  8    |  9   |  10   |  11   |
// |  12   |  13 |  14 |  15  |  16  |  17  |          x         |  18  |  19   |  20   |  21  |  22   |  23   |
// |  24   |  25 |  26 |  27  |  28  |  29  |          x         |  30  |  31   |  32   |  33  |  34   |  35   |
//                            |  36  |  37  |  38    | x |  39   |  40  |  41   |
//
        keymap {
                compatible = "zmk,keymap";
// Layer list
// 0. default_layer
// 1. us_num_layer
// 2. us_sym_layer
// 3. cs_base_layer
// 4. cs_num_layer
// 5. cs_sym_layer
// 7. nav_layer
// 8. fun_layer
// 9. adjust_layer

                default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |  F  |  Z  |  Y   |  O   |  U   |                   |  W   |  D   |  N    |  L   |   B   | BKSPC |
// |   Q   |  H  |  I  |  E   |  A   |  J   |                   |  G   |  T   |  R    |  S   |   P   |   X   |
// |  TAB  |     |     |      |  C   |  V   |                   |  K   |  M   |       |      |       |  ESC  |
//                            | NAV  |      |  SPACE |  | ENTER |      | FUN  |
                         bindings = <
          &kp DEL     &kp F      &kp Y     &kp O     &kp U    &kp Z                               &kp W      &kp D     &kp N    &kp L     &kp B      &kp BSPC
          &kp Q       &kp H      &kp I     &kp E     &kp A    &kp J                               &kp G      &kp T     &kp R    &kp S     &kp P      &kp X
          &kp TAB     &kp LCRTL  &kp LALT  &kp LGUI  &kp C    &kp V                               &kp K      &kp M     &kp LGUI &kp LALT  &kp LCTRL  &kp ESC
                                                     &tog 7   &kp LSHFT &lt 2 ENTER  &lt 1 SPACE  &kp RSHFT  &tog 8
                        >;
                };
                us_num_layer {
// ------------------------------------------------------------------------------------------------------------
// |   $   |  -  |  7  |  8   |  9   |  /   |                   |  ~   |  /    |  -    |  _   |   &   |       |
// |   .   |  0  |  4  |  5   |  6   |  =   |                   |  %   |  *    |  +    |  ^   |   $   |       |
// |   ,   |  +  |  1  |  2   |  3   |  *   |                   |  @   |       |       |      |       |       |
//                            |      |      |        |  |       |      |       |
                        bindings = <
          &kp PLUS   &kp N6    &kp N7    &kp N8    &kp N9    &kp N0                         &kp TILDE   &kp FSLH &kp MINUS &kp UNDER  &kp AMPS    &kp DOT
          &kp DOT    &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                         &kp PERCENT &kp STAR &kp PLUS  &kp CARET  &kp DOLLAR  &kp EQUAL
          &kp MINUS  &kp LCTRL &kp LALT  &kp LGUI  &kp STAR  &kp FSLH                       &kp AT      &kp HASH &kp LGUI  &kp LALT   &kp LCTRL   &kp COMMA
                                                   &kp EQUAL &kp LSHFT &kp ENTER  &kp SPACE &kp RSHFT   &tog 1
                        >;
                };

                us_sym_layer {
// ------------------------------------------------------------------------------------------------------------
// |   >   |  #  |  }  |  ]   |  )   |      |                   |  !   |  :    |  ;    |  \   |   '   |   ]   |
// |   <   |  |  |  {  |  [   |  (   |  =   |                   |  ?   |  .    |  ,    |  /   |   "   |   `   |
// |   ,   |  +  |  1  |  2   |  3   |  *   |                   |      |       |       |      |       |   >   |
//                            |      |      |        |  |       |      |       |
                        bindings = <
          &kp GT  &kp HASH  &kp RBRC  &kp RBKT  &kp RPAR  &kp AT                         &kp EXCL    &kp COLON &kp SEMI  &kp BSLH   &kp SQT     &none
          &kp LT  &kp PIPE  &kp LBRC  &kp LBKT  &kp LPAR  &kp EQUAL                      &kp QMARK   &kp DOT   &kp COMMA &kp FSLH   &kp DQT     &kp GRAVE
          &none   &kp LCTRL &kp LALT  &kp LGUI  &none     &none                          &none       &kp EQUAL &kp LGUI  &kp LALT   &kp LCTRL   &none
                                                &tog 2    &kp LSHFT &kp ENTER  &kp SPACE &kp RSHFT   &none
                        >;
                };

                cs_base_layer {
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |  F  |  Y  |  O   |  U   |  Z   |                   |  W   |  D   |  N    |  L   |   B   | BKSPC |
// |   Q   |  H  |  I  |  E   |  A   |  J   |                   |  G   |  T   |  R    |  S   |   P   |   X   |
// |  TAB  |LCTRL|LALT |LGUI  |  C   |  V   |                   |  K   |  M   | LGUI  | LALT | LCTRL |  ESC  |
//                            | NAV  |      |  SPACE |  | ENTER |      | FUN  |
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |` °  |  Ý  |  Ó   |  Ů   |  Ž   |                   |  Ú   |  Ď   |  Ň    |  ł   |   ẞ   | BKSPC |
// |   đ   |  É  |  Í  |  Ě   |  Á   |` ´   |                   |` ˇ   |  Ť   |  Ř    |  Š   |`  ¨   |   §   |
// |  TAB  |LCTRL|LALT |LGUI  |  Č   |  ø   |                   |  ÷   |  ×   | LGUI  | LALT | LCTRL |  ESC  |
//                            | NAV  |      |  SPACE |  | ENTER |      | FUN  |
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |  °  |  ¥  |  º   |  ‘   |  ’   |                   |  Ω   |  Ŋ   |  ↑    |  Ł   |   ß   | BKSPC |
// |   Đ   |  Ħ  |  ¦  |  €   |  Æ   |  ‚   |                   |  ®   |  ←   |  ↓    |  →   |   ¶   |   ı   |
// |  TAB  |LCTRL|LALT |LGUI  |  ©   |  Ø   |                   |` ^   |` ˙   | LGUI  | LALT | LCTRL |  ESC  |
//                            | NAV  |      |  SPACE |  | ENTER |      | FUN  |

                       bindings = <
          &kp DEL     &td_f       &td_y     &td_o     &td_u  &td_z                               &td_w     &td_d     &td_n     &td_l        &td_p       &kp BSPC
          &td_q       &td_h       &td_i     &td_e     &td_a  &td_j                               &td_g     &td_t     &td_r     &td_s        &td_p       &td_x
          &kp TAB     &kp LCTRL   &kp LALT  &kp LGUI  &td_c  &td_v                               &td_k     &td_m     &kp LGUI  &kp LALT     &kp LCTRL   &kp ESC
                                                      &tog 7 &kp LSHFT &lt 5 SPACE  &lt 4 ENTER  &kp LSHFT &tog 8
                       >;
                };

                cs_num_layer {
// ------------------------------------------------------------------------------------------------------------
// |   $   |  -  |  7  |  8   |  9   |  /   |                   |  ~   |  /    |  -    |  _   |   &   |   ]   |
// |   .   |  0  |  4  |  5   |  6   |  =   |                   |  %   |  *    |  +    |  ^   |   $   |   }   |
// |   ,   |  +  |  1  |  2   |  3   |  *   |                   |  @   |  [    |  {    |  <   |   |   |   >   |
//                            |      |      |        |  |       |      |       |
                        bindings = <
&kp CS_PLUSA  &kp CS_N6    &kp CS_N7 &kp CS_N8 &kp CS_N9     &kp CS_N0                         &kp CS_TILDE   &kp CS_FSLH &kp CS_MINUS &kp CS_UNDER  &kp CS_AMPS    &kp CS_DOT
&kp CS_DOT    &kp CS_N1    &kp CS_N2 &kp CS_N3 &kp CS_N4     &kp CS_N5                         &kp CS_PERCENT &kp CS_STAR &kp CS_PLUS  &kp CS_CARET  &kp CS_DOLLAR  &kp CS_EQUAL
&kp CS_MINUS  &kp LCTRL    &kp LALT  &kp LGUI  &kp CS_STAR   &kp CS_FSLH                       &kp CS_AT      &kp CS_HASH &kp LGUI     &kp LALT      &kp LCTRL      &kp CS_COMMA
                                               &kp CS_EQUAL  &kp LSHFT    &kp ENTER  &kp SPACE &kp RSHFT      &tog 4
                        >;
                };

                cs_sym_layer {
// ------------------------------------------------------------------------------------------------------------
// |   $   |  -  |  7  |  8   |  9   |  /   |                   |  ~   |  /    |  -    |  _   |   &   |   ]   |
// |   .   |  0  |  4  |  5   |  6   |  =   |                   |  %   |  *    |  +    |  ^   |   $   |   }   |
// |   ,   |  +  |  1  |  2   |  3   |  *   |                   |  @   |  [    |  {    |  <   |   |   |   >   |
//                            |      |      |        |  |       |      |       |
                        bindings = <
&kp CS_GT  &kp CS_HASH  &kp CS_RBRC  &kp CS_RBKT &kp CS_RPAR   &kp CS_AT                         &kp CS_EXCL   &kp CS_COLON  &kp CS_SEMI   &kp CS_BSLH  &kp CS_SQT  &none
&kp CS_LT  &kp CS_PIPE  &kp CS_LBRC  &kp CS_LBKT &kp CS_LPAR   &kp CS_EQUAL                      &kp CS_QMARK  &kp CS_DOT    &kp CS_COMMA  &kp CS_FLSH  &kp CS_DQT  &kp CS_GRAVE
&none      &kp LCTRL    &kp LALT     &kp LGUI    &none         &none                             &none         &kp CS_EQUAL  &kp LGUI      &kp LALT     &kp LCTRL   &none
                                                 &tog 5        &kp LSHFT    &kp ENTER  &kp SPACE &kp RSHFT     &none
                        >;
                };

                nav_layer {
                        bindings = <
&kp C_STOP  &kp C_MUTE   &kp C_VOL_UP &kp C_VOL_DN &kp C_PLAY   &kp C_PAUSE                        &kp INS      &kp HOME   &kp UP      &kp END   &kp PG_UP  &kp BSPC
&kp K_REDO  &kp K_UNDO   &kp K_CUT    &kp K_PASTE  &kp K_COPY   &kp K_CMENU                        &kp CAPS     &kp LEFT   &kp DOWN    &kp RIGHT &kp PG_DN  &kp ENTER
&none       &kp LGUI     &kp LALT     &kp LCTRL    &kp LSHFT    &kp PSCRN                          &kp B        &kp H      &kp J       &kp K     &kp L      &kp F
                                                   &tog 7       &kp LSHFT     &kp ENTER  &kp SPACE &kp LSHFT    &tog 7
                        >;
                };
                fun_layer {
                        bindings = <
&kp LSHFT  &kp F9       &kp F10      &kp F11      &kp F12      &tog 9                             &emacs_m_y  &none         &kp P         &none         &emacs_c_x_u  &none
&kp LCTRL  &kp F5       &kp F6       &kp F7       &kp F8       &none                              &emacs_m_w  &kp  B        &kp N         &kp F         &emacs_c_x_e  &kp PSCRN
&kp LALT   &kp F1       &kp F2       &kp F3       &kp F4       &none                              &emacs_c_w  &emacs_c_y    &kp LGUI      &kp LALT      &kp LCTRL     &none
                                                  &tog 8       &kp LSHFT &kp ENTER  &kp SPACE     &kp LSHFT   &tog 8
                        >;
                };
                adjust_layer {
                        bindings = <
 &bootloader   &none          &none          &none          &none          &tog 9                                       &none          &none          &none          &none          &none          &none
 &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                                 &none          &none          &none          &none          &none          &none
 &sys_reset    &none          &none          &none          &none          &none                                        &none          &none          &none          &none          &none          &none
                                                            &tog 9         &none          &none          &none          &none          &tog 9
                        >;
                };
        };
};
